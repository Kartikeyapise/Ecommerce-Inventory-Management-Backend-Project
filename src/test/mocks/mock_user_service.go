// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kartikeya/product_catalog_DIY/src/main/service (interfaces: UserServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kartikeya/product_catalog_DIY/src/main/model"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceInterface) CreateUser(arg0 model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceInterfaceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).CreateUser), arg0)
}

// IsMerchant mocks base method.
func (m *MockUserServiceInterface) IsMerchant(arg0 model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMerchant", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMerchant indicates an expected call of IsMerchant.
func (mr *MockUserServiceInterfaceMockRecorder) IsMerchant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMerchant", reflect.TypeOf((*MockUserServiceInterface)(nil).IsMerchant), arg0)
}

// IsMerchantEmail mocks base method.
func (m *MockUserServiceInterface) IsMerchantEmail(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMerchantEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMerchantEmail indicates an expected call of IsMerchantEmail.
func (mr *MockUserServiceInterfaceMockRecorder) IsMerchantEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMerchantEmail", reflect.TypeOf((*MockUserServiceInterface)(nil).IsMerchantEmail), arg0)
}

// IsNormalUser mocks base method.
func (m *MockUserServiceInterface) IsNormalUser(arg0 model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNormalUser", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNormalUser indicates an expected call of IsNormalUser.
func (mr *MockUserServiceInterfaceMockRecorder) IsNormalUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNormalUser", reflect.TypeOf((*MockUserServiceInterface)(nil).IsNormalUser), arg0)
}

// IsUserTypeValid mocks base method.
func (m *MockUserServiceInterface) IsUserTypeValid(arg0 model.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserTypeValid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserTypeValid indicates an expected call of IsUserTypeValid.
func (mr *MockUserServiceInterfaceMockRecorder) IsUserTypeValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserTypeValid", reflect.TypeOf((*MockUserServiceInterface)(nil).IsUserTypeValid), arg0)
}

// IsUserValid mocks base method.
func (m *MockUserServiceInterface) IsUserValid(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserValid", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserValid indicates an expected call of IsUserValid.
func (mr *MockUserServiceInterfaceMockRecorder) IsUserValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserValid", reflect.TypeOf((*MockUserServiceInterface)(nil).IsUserValid), arg0)
}
